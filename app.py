import streamlit as st
from PIL import Image
import base64


# Funktion f√∂r att konvertera bild till base64
def get_image_base64(image_path):
    with open(image_path, "rb") as img_file:
        return base64.b64encode(img_file.read()).decode()


def format_number(number):
    return f"{number:,}".replace(",", " ")

# Funktion f√∂r att √§ndra storlek p√• bild
def resize_image(image_path, width, height):
    image = Image.open(image_path)
    return image.resize((width, height))

# Titel och introduktion
st.title("Bygg ditt spartorn! üèóÔ∏è")
st.write("V√§lj √•tg√§rder och se ditt torn v√§xa medan du sparar energi, vatten eller hj√§lper klimatet!")
st.write("_üí°Tips! Tryck p√• texterna bredvid klossarna f√∂r mer information kring √•tg√§rden.üí°_")


# V√§lj kategori
kategori = st.selectbox("V√§lj det omr√•de d√§r du vill spara:", ["Klimat", "Vatten", "Energi"])

# V√§lj antal personer √§r ni i hush√•llet
persons = st.number_input("Hur m√•nga personer √§r ni i hush√•llet?", min_value=1, step=1)

# Klossar och besparingar baserat p√• kategori
klossar = {}
if kategori == "Klimat":
    klossar = {
        "K√§llsortera sopor": {"bild": "led.png", "besparing": 950, "info": "Genom att k√§llsortera sopor ist√§llet f√∂r att l√§gga allt i br√§nnbart kan mer material √•tervinnas."},
        "Buss ist√§llet f√∂r bil": {"bild": "led.png", "besparing": 438, "info": "Om du har 8 km enkelv√§g till jobbet och v√§ljer att √•ka buss ist√§llet f√∂r bensinbil till jobbet blir det en tydlig vinst f√∂r klimatet."}, #16 km per dag i 250 arbetsdagar. Co2e eller co2? Bil = 2,507 kg co2 & 3,063 co2e. Buss = 0,756 co2 och 1,167 co2e.
        "Byt ut mj√∂lken": {"bild": "led.png", "besparing": 75*persons, "info": "Svensken dricker i genomsnitt 1,75 liter mj√∂lk i veckan och genom att byta ut mot havremj√∂lk minskar du milj√∂p√•verkan med 70%!"},
        "Second hand ist√§llet f√∂r nytt": {"bild": "led.png", "besparing": 1430, "info": "Kom p√• senare."}, 
        "Vegetarisk mat": {"bild": "led.png", "besparing": 987, "info": "Kom p√• senare."}, 

    }
elif kategori == "Vatten":
    klossar = {
        "Sn√•lspola n√§r du kissat": {"bild": "led.png", "besparing": 2920*persons, "info": "Om varje person anv√§nder sn√•lspolning n√§r hen har kissat halveras vattenf√∂rbrukning vid spolning."}, #Genomsnitt √§r kissa 5-8 g√•nger per dag. S√§g 8 och 4 av dem √§r hemma. Sn√•lspola √§r 2 liter ist√§llet f√∂r 4 l. 4*365=2920
        "Duscha 2 minuter kortare": {"bild": "led.png", "besparing": 300*persons, "info": "Genom att varje person duschar 2 minuter kortare sparas stora m√§ngder vatten."}, 
        "Full tv√§ttmaskin": {"bild": "led.png", "besparing": 789, "info": "Kom p√• senare."}, 
        "Diska utan rinnande vatten": {"bild": "led.png", "besparing": 1430, "info": "Kom p√• senare."}, 
        "Kallt vatten i kylen": {"bild": "led.png", "besparing": 450, "info": "Kom p√• senare."}, 


    }
elif kategori == "Energi":
    klossar = {
        "Anv√§nd vattenkokaren": {"bild": "led.png", "besparing": 50, "info": "Om du ers√§tter cirka 2 liter vattenkokning i kastrull med vattenkokare varje dag s√• sparar du 50 kWh/√•r."},
        "Frosta av frysen": {"bild": "led.png", "besparing": 50, "info": "En isig frys kan anv√§nda 50 kWh mer om √•ret, j√§mf√∂rt med en avfrostad."},
        "Blockera inte elementen": {"bild": "led.png", "besparing": 600, "info": "Om en s√§ng, soffa eller l√•nga gardiner st√•r framf√∂r elementen s√• kan v√§rmen inte komma ut i rummet. Det kan i sin tur inneb√§ra att du upplever rum eller bostad som on√∂digt kalla, helt i on√∂dan!"},
        "Timer p√• kaffekokaren": {"bild": "led.png", "besparing": 1430, "info": "Kom p√• senare."}, 
        "Sl√§ck n√§r du g√•r": {"bild": "led.png", "besparing": 140, "info": "Kom p√• senare."}, 

    }

# Ladda bilder (m√•ste finnas i samma mapp som scriptet eller en webbadress)
bildmap = {}
for namn, data in klossar.items():
    bild = Image.open(data["bild"])
    bild = bild.resize((int(bild.width / 4), int(bild.height / 4)))  # G√∂r bilden mindre
    bildmap[namn] = bild

# Anv√§ndaren v√§ljer √•tg√§rder
valda_klossar = st.multiselect("V√§lj dina √•tg√§rder:", list(klossar.keys()))
st.markdown("<div style='height: 20px;'></div>", unsafe_allow_html=True)
# Visa r√§tt subheader baserat p√• kategori
if kategori == "Klimat":
    st.subheader("Ditt klimatspartorn")
elif kategori == "Vatten":
    st.subheader("Ditt vattenspartorn")
elif kategori == "Energi":
    st.subheader("Ditt energispartorn")

# L√§gg till extra utrymme ovanf√∂r rubriken   
st.markdown("<div style='height: 80px;'></div>", unsafe_allow_html=True)

# Visa klossar som staplas
for index, kloss in enumerate(valda_klossar):
    bild_base64 = get_image_base64(klossar[kloss]["bild"])
    col1, col2 = st.columns([1, 3])
    with col1:
        st.markdown(
            f"""
            <div style="position: relative; text-align: left; margin-top: -50px; z-index: {len(valda_klossar) - index};">  <!-- Justera margin-top och z-index f√∂r att √∂verlappa bilderna -->
                <img src="data:image/png;base64,{bild_base64}" style="width: 100px;">
            </div>
            """,
            unsafe_allow_html=True
        )
    with col2:
        if st.button(f"{kloss}", key=f"button_{index}"):
            st.session_state[f"info_{index}"] = not st.session_state.get(f"info_{index}", False)

        if st.session_state.get(f"info_{index}", False):
            st.info(klossar[kloss]["info"])

# Ber√§kna total besparing
total_besparing = sum(klossar[kloss]["besparing"] for kloss in valda_klossar)

st.markdown("<div style='height: 90px;'></div>", unsafe_allow_html=True)


# Landvetter till London och tillbaka = 1011 kg CO2e (2080 km) 
flyg = total_besparing/1011
tree = total_besparing/25 # ej kontrollerad k√§lla
# Mobil - Iphone 15 = 13Wh batteri = 0,013 kWh batteri. 0,037 kg CO2e/kWh (Boverket) => 1 kg CO2 = 27 kWh => 27/0,013 = 2076,9230769230769230769230769231
mobil = total_besparing*2076.9230769230769230769230769231


# 1 liter vatten =  0,5 kronor
kronor_vatten = total_besparing*0.5
# En kaffemugg = 20 cl
kaffe = total_besparing/0.2
# Hink = 10 liter
hink = total_besparing/10
# Badkar = 200 liter
badkar = total_besparing/200


# 1 kwh = 1,5 kronor (dubbelkolla kwh v√§rme och kwh el)
kronor_energi = total_besparing*1.5
# Dammsugare = 700 W = 0,7 kW
damm = total_besparing/0.7
# Elbil = 2 kWh/mil
elbil = total_besparing/2
# TV = 0,054 kWh/h
tv = total_besparing/0.054


# Snyggar till v√§rden.
flyg = round(flyg,1)
flyg = format_number(flyg)
kronor_energi = round(kronor_energi)
kronor_energi = format_number(kronor_energi)
kronor_vatten = round(kronor_vatten)
kronor_vatten = format_number(kronor_vatten)
total_besparing = format_number(total_besparing)
kaffe = round(kaffe)
kaffe = format_number(kaffe)
hink = round(hink)
hink = format_number(hink)
tree = round(tree)
tree = format_number(tree)
mobil = round(mobil)
mobil = format_number(mobil)
badkar = round(badkar)
badkar = format_number(badkar)
damm = round(damm)
damm = format_number(damm)
elbil = round(elbil)
elbil = format_number(elbil)
tv = round(tv)
tv = format_number(tv)

# Visa olika meddelanden baserat p√• vald kategori
if kategori == "Klimat":
    st.write(f"### üéâ Du sparar **{total_besparing}** kg koldioxid per √•r!")
elif kategori == "Vatten":
    st.write(f"### üéâ Du sparar **{total_besparing}** liter vatten och {kronor_vatten} kronor per √•r!")
elif kategori == "Energi":
    st.write(f"### üéâ Du sparar **{total_besparing}** kilowattimmar och {kronor_energi} kronor per √•r!")





kaffe = f"{kaffe} koppar kaffe"
kronor_vatten = f"{kronor_vatten} kronor varje √•r"
hink = f"{hink} hinkar med vatten"
flyg = f"{flyg} flygresor tur och retur till London"
tree = f"Koldioxidupptag fr√•n {tree} tr√§d"
mobil = f"Ladda din mobiltelefon {mobil} g√•nger "
badkar = f"{badkar} fulla badkar med vatten"
damm = f"{damm} timmar dammsugning"
elbil = f"{elbil} mil med en elbil"
tv = f"{tv} timmar TV-tittande"

# Lista med bilder och beskrivningar f√∂r varje kategori
bilder_och_beskrivningar = {
    "Klimat": [
        {"bild": "flygplan.png", "beskrivning": flyg, "bredd": 200, "h√∂jd": 150},
        {"bild": "tree.png", "beskrivning": tree, "bredd": 200, "h√∂jd": 150},
        {"bild": "mobil.png", "beskrivning": mobil, "bredd": 200, "h√∂jd": 150},
    ],
    "Vatten": [
        {"bild": "badkar.png", "beskrivning": badkar, "bredd": 200, "h√∂jd": 150},
        {"bild": "hink.png", "beskrivning": hink, "bredd": 200, "h√∂jd": 150},
        {"bild": "te.png", "beskrivning": kaffe, "bredd": 200, "h√∂jd": 150},
    ],
    "Energi": [
        {"bild": "bil.png", "beskrivning": elbil, "bredd": 200, "h√∂jd": 150},
        {"bild": "damm.png", "beskrivning": damm, "bredd": 200, "h√∂jd": 150},
        {"bild": "tv.png", "beskrivning": tv, "bredd": 200, "h√∂jd": 150},
    ],
}




# Visa tre bilder med text under l√§ngst ner baserat p√• vald kategori
st.markdown("<div style='height: 100px;'></div>", unsafe_allow_html=True)

# Initialisera session state f√∂r knappen om den inte redan finns
if "visa_bilder" not in st.session_state:
    st.session_state.visa_bilder = False

# Funktion f√∂r att v√§xla knappens tillst√•nd
def toggle_bilder():
    st.session_state.visa_bilder = not st.session_state.visa_bilder

# Best√§m knapptext baserat p√• tillst√•ndet
knapp_text = "Se vad det motsvarar:" if not st.session_state.visa_bilder else "D√∂lj bilder"

# L√§gg till en knapp f√∂r att visa/d√∂lja bilderna
st.button(knapp_text, on_click=toggle_bilder)

# Visa eller d√∂lj bilderna baserat p√• knappens tillst√•nd
if st.session_state.visa_bilder:
    cols = st.columns([1, 0.5, 1, 0.5, 1])  # L√§gg till extra kolumner f√∂r mellanrum
    for i, item in enumerate(bilder_och_beskrivningar[kategori]):
        col = cols[i * 2]  # Anv√§nd varannan kolumn f√∂r bilderna
        bild = resize_image(item["bild"], item["bredd"], item["h√∂jd"])
        col.image(bild)
        col.write(item["beskrivning"])


#st.markdown("<div style='height: 50px;'></div>", unsafe_allow_html=True)
#st.write("Vill du skapa ett m√•l?")
#st.markdown("<div style='height: 50px;'></div>", unsafe_allow_html=True)
#bra = st.slider("V√§lj hur m√•nga liter du vill spara per √•r", min_value=1, max_value=1000)
#st.markdown("<div style='height: 50px;'></div>", unsafe_allow_html=True)
#good = f"F√∂r att spara {bra} liter vatten beh√∂ver du ..."
#st.write(good)
# Du beh√∂ver √•ka s√• h√§r mycket kollektiv f√∂r att n√• ditt m√•l (eller liknande)
